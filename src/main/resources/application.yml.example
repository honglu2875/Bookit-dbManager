server:
  port: 8080

spring:
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect:
          org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  thymeleaf:
    cache: false

  # Spring security is optional and only for testing purpose in this app, because we should not directly handle the OAuth2 token retrival from Google:
  #     [user] --- (OAuth2) --- [Google].
  # We do store the refresh tokens that are already obtained from Google and use them to make further communications.
  # The refresh tokens should be obtained from the frontend and communicated with us by Basic Authorization:
  #     [frontend server] --- (Basic) --- [this].
  # TODO: Improve the Basic Authorization and make it compatible with OAuth2 Client Credentials Grant.

  # Once a refresh token is saved, it will use the refresh token to refresh access tokens, update busy time periods, make bookings, etc.
  #     [this] --- (OAuth2) --- [Google Calendar API]
  # To test the API communications, Spring security might be invoked to obtain this refresh token without a frontend. In this case, fill in the clientId, cliendSecret, and api.provider.google.key below.

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: <your client id>
            clientSecret: <your client secret>
            scope:
              - email
              - profile
              - https://www.googleapis.com/auth/calendar.readonly
              - https://www.googleapis.com/auth/calendar.events
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&access_type=offline

  # Please change the following into your own Postgres setup.

  datasource:
    platform: postgres
    url: jdbc:postgresql://localhost:5432/data
    username: foo
    password: bar
    driverClassName: org.postgresql.Driver

logging:
  #file: /logs/application-debug.log
  level:
    com.bookit.dbManager: DEBUG
    #org.springframework.web: DEBUG
    #org.hibernate: DEBUG
  output:
    ansi:
      enabled: DETECT

api:
  provider:
    google:
      key: <your google api key>
